// Generated by CoffeeScript 1.9.2

/*
jQuery Gridly
Copyright 2015 Kevin Sylvestre
1.2.9
 */

(function() {
  "use strict";
  var JQ, Animation, Draggable, Gridly,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;
 
  JQ = jQuery;
  

  Animation = (function() {
    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function(JQel) {
      var el, ref, result, type;
      el = JQel[0];
      ref = this.transitions;
      for (type in ref) {
        result = ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function(JQel, callback) {
      var transition;
      transition = this.transition(JQel);
      if (transition != null) {
        return JQel.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Draggable = (function() {
    function Draggable(JQcontainer, selector, callbacks) {
      this.touchend = bind(this.touchend, this);
      this.click = bind(this.click, this);
      this.moved = bind(this.moved, this);
      this.ended = bind(this.ended, this);
      this.began = bind(this.began, this);
      this.coordinate = bind(this.coordinate, this);
      this.off = bind(this.off, this);
      this.on = bind(this.on, this);
      this.toggle = bind(this.toggle, this);
      this.bind = bind(this.bind, this);
      this.JQcontainer = JQcontainer;
      this.selector = selector;
      this.callbacks = callbacks;
      this.toggle();
    }

    Draggable.prototype.bind = function(method) {
      if (method == null) {
        method = 'on';
      }
      JQ(document)[method]('mousemove touchmove', this.moved);
      return JQ(document)[method]('mouseup touchcancel', this.ended);
    };

    Draggable.prototype.toggle = function(method) {
      if (method == null) {
        method = 'on';
      }
      this.JQcontainer[method]('mousedown touchstart', this.selector, this.began);
      this.JQcontainer[method]('touchend', this.selector, this.touchend);
      return this.JQcontainer[method]('click', this.selector, this.click);
    };

    Draggable.prototype.on = function() {
      return this.toggle('on');
    };

    Draggable.prototype.off = function() {
      return this.toggle('off');
    };

    Draggable.prototype.coordinate = function(event) {
      switch (event.type) {
        case 'touchstart':
        case 'touchmove':
        case 'touchend':
        case 'touchcancel':
          return event.originalEvent.touches[0];
        default:
          return event;
      }
    };

    Draggable.prototype.began = function(event) {
      var ref;
      if (this.JQtarget) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      this.bind('on');
      this.JQtarget = JQ(event.target).closest(this.JQcontainer.find(this.selector));
      this.JQtarget.addClass('dragging');
      this.origin = {
        x: this.coordinate(event).pageX - this.JQtarget.position().left,
        y: this.coordinate(event).pageY - this.JQtarget.position().top
      };
      return (ref = this.callbacks) != null ? typeof ref.began === "function" ? ref.began(event) : void 0 : void 0;
    };

    Draggable.prototype.ended = function(event) {
      var ref;
      if (this.JQtarget == null) {
        return;
      }
      if (event.type !== 'touchend') {
        event.preventDefault();
        event.stopPropagation();
      }
      this.bind('off');
      this.JQtarget.removeClass('dragging');
      delete this.JQtarget;
      delete this.origin;
      return (ref = this.callbacks) != null ? typeof ref.ended === "function" ? ref.ended(event) : void 0 : void 0;
    };

    Draggable.prototype.moved = function(event) {
      var ref;
      if (this.JQtarget == null) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      this.JQtarget.css({
        left: this.coordinate(event).pageX - this.origin.x,
        top: this.coordinate(event).pageY - this.origin.y
      });

      this.dragged = this.JQtarget;
      return (ref = this.callbacks) != null ? typeof ref.moved === "function" ? ref.moved(event) : void 0 : void 0;
    };

    Draggable.prototype.click = function(event) {
      if (!this.dragged) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      return delete this.dragged;
    };

    Draggable.prototype.touchend = function(event) {
      this.ended(event);
      return this.click(event);
    };

    return Draggable;

  })();

  Gridly = (function() {
    Gridly.settings = {
      base: 60,
      gutter: 20,
      columns: 12,
      draggable: {
        zIndex: 800,
        selector: '> *'
      }
    };

    Gridly.gridly = function(JQel, options) {
      var data;
      if (options == null) {
        options = {};
      }
      data = JQel.data('_gridly');
      if (!data) {
        data = new Gridly(JQel, options);
        JQel.data('_gridly', data);
      }
      return data;
    };

    function Gridly(JQel, settings) {
      if (settings == null) {
        settings = {};
      }
      this.optimize = bind(this.optimize, this);
      this.layout = bind(this.layout, this);
      this.structure = bind(this.structure, this);
      this.position = bind(this.position, this);
      this.size = bind(this.size, this);
      this.draggingMoved = bind(this.draggingMoved, this);
      this.draggingEnded = bind(this.draggingEnded, this);
      this.draggingBegan = bind(this.draggingBegan, this);
      this.JQsorted = bind(this.JQsorted, this);
      this.draggable = bind(this.draggable, this);
      this.compare = bind(this.compare, this);
      this.JQ = bind(this.JQ, this);
      this.reordinalize = bind(this.reordinalize, this);
      this.ordinalize = bind(this.ordinalize, this);
      this.JQel = JQel;
      this.settings = JQ.extend({}, Gridly.settings, settings);
      this.ordinalize(this.JQ('> *'));
      if (this.settings.draggable !== false) {
        this.draggable();
      }
      return this;
    }

    Gridly.prototype.ordinalize = function(JQelements) {
      var JQelement, i, j, ref, results1;
      results1 = [];
      for (i = j = 0, ref = JQelements.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        JQelement = JQ(JQelements[i]);
        results1.push(JQelement.data('position', i));
      }
      return results1;
    };

    Gridly.prototype.reordinalize = function(JQelement, position) {
      return JQelement.data('position', position);
    };

    Gridly.prototype.JQ = function(selector) {
      return this.JQel.find(selector);
    };

    Gridly.prototype.compare = function(d, s) {
      if (d.y > s.y + s.h) {
        return +1;
      }
      if (s.y > d.y + d.h) {
        return -1;
      }
      if ((d.x + (d.w / 2)) > (s.x + (s.w / 2))) {
        return +1;
      }
      if ((s.x + (s.w / 2)) > (d.x + (d.w / 2))) {
        return -1;
      }
      return 0;
    };

    Gridly.prototype.draggable = function(method) {
      if (this._draggable == null) {
        this._draggable = new Draggable(this.JQel, this.settings.draggable.selector, {
          began: this.draggingBegan,
          ended: this.draggingEnded,
          moved: this.draggingMoved
        });
      }
      if (method != null) {
        return this._draggable[method]();
      }
    };

    Gridly.prototype.JQsorted = function(JQelements) {
      return (JQelements || this.JQ('> *')).sort(function(a, b) {
        var JQa, JQb, aPosition, aPositionInt, bPosition, bPositionInt;
        JQa = JQ(a);
        JQb = JQ(b);
        aPosition = JQa.data('position');
        bPosition = JQb.data('position');
        aPositionInt = parseInt(aPosition);
        bPositionInt = parseInt(bPosition);
        if ((aPosition != null) && (bPosition == null)) {
          return -1;
        }
        if ((bPosition != null) && (aPosition == null)) {
          return +1;
        }
        if (!aPosition && !bPosition && JQa.index() < JQb.index()) {
          return -1;
        }
        if (!bPosition && !aPosition && JQb.index() < JQa.index()) {
          return +1;
        }
        if (aPositionInt < bPositionInt) {
          return -1;
        }
        if (bPositionInt < aPositionInt) {
          return +1;
        }
        return 0;
      });
    };

    Gridly.prototype.draggingBegan = function(event) {
      var JQelements, ref, ref1;
      JQelements = this.JQsorted();
      this.ordinalize(JQelements);
      setTimeout(this.layout, 0);
      return (ref = this.settings) != null ? (ref1 = ref.callbacks) != null ? typeof ref1.reordering === "function" ? ref1.reordering(JQelements) : void 0 : void 0 : void 0;
    };

    Gridly.prototype.draggingEnded = function(event) {
      var JQelements, ref, ref1;
      JQelements = this.JQsorted();
      this.ordinalize(JQelements);
      setTimeout(this.layout, 0);
      return (ref = this.settings) != null ? (ref1 = ref.callbacks) != null ? typeof ref1.reordered === "function" ? ref1.reordered(JQelements, this._draggable.dragged) : void 0 : void 0 : void 0;
    };

    Gridly.prototype.draggingMoved = function(event) {
      var JQdragging, JQelements, element, i, index, j, k, len, original, positions, ref, ref1, ref2;
      JQdragging = JQ(event.target).closest(this.JQ(this.settings.draggable.selector));
      JQelements = this.JQsorted(this.JQ(this.settings.draggable.selector));
      positions = this.structure(JQelements).positions;
      original = index = JQdragging.data('position');
      ref = positions.filter(function(position) {
        return position.JQelement.is(JQdragging);
      });
      
      for (j = 0, len = ref.length; j < len; j++) {
        element = ref[j];
        element.x = JQdragging.position().left;
        element.y = JQdragging.position().top;
        element.w = JQdragging.data('width') || JQdragging.outerWidth();
        element.h = JQdragging.data('height') || JQdragging.outerHeight();
      }
      positions.sort(this.compare);
      JQelements = positions.map(function(position) {
        return position.JQelement;
      });
      JQelements = (((ref1 = this.settings.callbacks) != null ? ref1.optimize : void 0) || this.optimize)(JQelements);
      for (i = k = 0, ref2 = JQelements.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        this.reordinalize(JQ(JQelements[i]), i);
      }
      return this.layout();
    };

    Gridly.prototype.size = function(JQelement) {
      return ((JQelement.data('width') || JQelement.outerWidth()) + this.settings.gutter) / (this.settings.base + this.settings.gutter);
    };

    Gridly.prototype.position = function(JQelement, columns) {
      var column, height, i, j, k, max, ref, ref1, ref2, size;
      size = this.size(JQelement);
      height = Infinity;
      column = 0;
      for (i = j = 0, ref = columns.length - size; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        max = Math.max.apply(Math, columns.slice(i, i + size));
        if (max < height) {
          height = max;
          column = i;
        }
      }
      for (i = k = ref1 = column, ref2 = column + size; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
        columns[i] = height + (JQelement.data('height') || JQelement.outerHeight()) + this.settings.gutter;
      }
      return {
        x: column * (this.settings.base + this.settings.gutter),
        y: height
      };
    };

    Gridly.prototype.structure = function(JQelements) {
      var JQelement, columns, i, index, j, position, positions, ref;
      if (JQelements == null) {
        JQelements = this.JQsorted();
      }
      positions = [];
      columns = (function() {
        var j, ref, results1;
        results1 = [];
        for (i = j = 0, ref = this.settings.columns; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results1.push(0);
        }
        return results1;
      }).call(this);
      for (index = j = 0, ref = JQelements.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
        JQelement = JQ(JQelements[index]);
        position = this.position(JQelement, columns);
        positions.push({
          x: position.x,
          y: position.y,
          w: JQelement.data('width') || JQelement.outerWidth(),
          h: JQelement.data('height') || JQelement.outerHeight(),
          JQelement: JQelement
        });
      }
      return {
        height: Math.max.apply(Math, columns),
        positions: positions
      };
    };

    Gridly.prototype.layout = function() {
      var JQelement, JQelements, index, j, position, ref, ref1, structure;
      JQelements = (((ref = this.settings.callbacks) != null ? ref.optimize : void 0) || this.optimize)(this.JQsorted());
      structure = this.structure(JQelements);
      for (index = j = 0, ref1 = JQelements.length; 0 <= ref1 ? j < ref1 : j > ref1; index = 0 <= ref1 ? ++j : --j) {
        JQelement = JQ(JQelements[index]);
        position = structure.positions[index];
        if (JQelement.is('.dragging')) {
          continue;
        }
        JQelement.css({
          position: 'absolute',
          left: position.x,
          top: position.y
        });
      }
      return this.JQel.css({
        height: structure.height
      });
    };

    Gridly.prototype.optimize = function(originals) {
      var columns, index, j, ref, results;
      results = [];
      columns = 0;
      while (originals.length > 0) {
        if (columns === this.settings.columns) {
          columns = 0;
        }
        index = 0;
        for (index = j = 0, ref = originals.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
          if (!(columns + this.size(JQ(originals[index])) > this.settings.columns)) {
            break;
          }
        }
        if (index === originals.length) {
          index = 0;
          columns = 0;
        }
        columns += this.size(JQ(originals[index]));
        results.push(originals.splice(index, 1)[0]);
      }
      return results;
    };

    return Gridly;

  })();

  JQ.fn.extend({
    gridly: function() {
      var option, parameters;
      option = arguments[0], parameters = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var JQthis, action, options;
        JQthis = JQ(this);
        options = JQ.extend({}, JQ.fn.gridly.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (action == null) {
          action = "layout";
        }
        return Gridly.gridly(JQthis, options)[action](parameters);
      });
    }
  });

}).call(this);
